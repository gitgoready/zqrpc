// Generated by the protocol buffer compiler , zqrpc plugin.  DO NOT EDIT!
// source: dqlib.proto

#ifndef ZQRPC_dqlib_2eproto__INCLUDED
#define ZQRPC_dqlib_2eproto__INCLUDED

#include <string>
#include <zqrpc.hpp>

namespace google {
namespace protobuf {
class ServiceDescriptor;
class MethodDescriptor;
}  // namespace protobuf
}  // namespace google
namespace zqrpc {
class RpcChannel;
}  //namespace zqrpc
#include "dqlib.pb.h"

namespace echo {
void zqrpc_protobuf_AssignDesc_dqlib_2eproto();
void zqrpc_protobuf_ShutdownFile_dqlib_2eproto();

class DQService_Stub;

class DQService : public zqrpc::ServiceBase {
 protected:
  // This class should be treated as an abstract interface.
  inline DQService() {};
 public:
  virtual ~DQService();

  typedef DQService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void CLAService(const ::echo::MvoAssetAllocationInput* request,
                       ::echo::MvoAssetAllocationOutput* response);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DQService);
};

class DQService_Stub {
 public:
  DQService_Stub(::zqrpc::RpcChannel* channel); 
  ~DQService_Stub();

  inline ::zqrpc::RpcChannel* channel() { return channel_; }


  void CLAService(::zqrpc::ZController* controller,
                       ::echo::MvoAssetAllocationInput* request,
                       ::echo::MvoAssetAllocationOutput* response,
                       long deadline_ms=-1);
  void CLAService_Send(::zqrpc::ZController* controller,
                       ::echo::MvoAssetAllocationInput* request);
  void CLAService_Recv(::zqrpc::ZController* controller,
                       ::echo::MvoAssetAllocationOutput* response,
                       long deadline_ms=-1);
 private:
  ::zqrpc::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DQService_Stub);
};


}  // namespace echo
#endif  // ZQRPC_dqlib_2eproto__INCLUDED
