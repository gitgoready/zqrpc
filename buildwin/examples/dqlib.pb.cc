// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dqlib.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dqlib.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace echo {

namespace {

const ::google::protobuf::Descriptor* Vector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector_reflection_ = NULL;
const ::google::protobuf::Descriptor* Matrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Matrix_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Matrix_StorageOrder_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MvoAssetAllocationInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MvoAssetAllocationInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* MvoAssetAllocationOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MvoAssetAllocationOutput_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dqlib_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_dqlib_2eproto() {
  protobuf_AddDesc_dqlib_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dqlib.proto");
  GOOGLE_CHECK(file != NULL);
  Vector_descriptor_ = file->message_type(0);
  static const int Vector_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, data_),
  };
  Vector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector_descriptor_,
      Vector::internal_default_instance(),
      Vector_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _internal_metadata_));
  Matrix_descriptor_ = file->message_type(1);
  static const int Matrix_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, storage_order_),
  };
  Matrix_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Matrix_descriptor_,
      Matrix::internal_default_instance(),
      Matrix_offsets_,
      -1,
      -1,
      -1,
      sizeof(Matrix),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, _internal_metadata_));
  Matrix_StorageOrder_descriptor_ = Matrix_descriptor_->enum_type(0);
  MvoAssetAllocationInput_descriptor_ = file->message_type(2);
  static const int MvoAssetAllocationInput_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvoAssetAllocationInput, asset_return_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvoAssetAllocationInput, strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvoAssetAllocationInput, target_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvoAssetAllocationInput, lower_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvoAssetAllocationInput, upper_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvoAssetAllocationInput, target_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvoAssetAllocationInput, annualization_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvoAssetAllocationInput, num_returns_for_mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvoAssetAllocationInput, num_ef_points_),
  };
  MvoAssetAllocationInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MvoAssetAllocationInput_descriptor_,
      MvoAssetAllocationInput::internal_default_instance(),
      MvoAssetAllocationInput_offsets_,
      -1,
      -1,
      -1,
      sizeof(MvoAssetAllocationInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvoAssetAllocationInput, _internal_metadata_));
  MvoAssetAllocationOutput_descriptor_ = file->message_type(3);
  static const int MvoAssetAllocationOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvoAssetAllocationOutput, weights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvoAssetAllocationOutput, target_value_),
  };
  MvoAssetAllocationOutput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MvoAssetAllocationOutput_descriptor_,
      MvoAssetAllocationOutput::internal_default_instance(),
      MvoAssetAllocationOutput_offsets_,
      -1,
      -1,
      -1,
      sizeof(MvoAssetAllocationOutput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvoAssetAllocationOutput, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dqlib_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector_descriptor_, Vector::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Matrix_descriptor_, Matrix::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MvoAssetAllocationInput_descriptor_, MvoAssetAllocationInput::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MvoAssetAllocationOutput_descriptor_, MvoAssetAllocationOutput::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dqlib_2eproto() {
  Vector_default_instance_.Shutdown();
  delete Vector_reflection_;
  Matrix_default_instance_.Shutdown();
  delete Matrix_reflection_;
  MvoAssetAllocationInput_default_instance_.Shutdown();
  delete MvoAssetAllocationInput_reflection_;
  MvoAssetAllocationOutput_default_instance_.Shutdown();
  delete MvoAssetAllocationOutput_reflection_;
}

void protobuf_InitDefaults_dqlib_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Vector_default_instance_.DefaultConstruct();
  Matrix_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MvoAssetAllocationInput_default_instance_.DefaultConstruct();
  MvoAssetAllocationOutput_default_instance_.DefaultConstruct();
  Vector_default_instance_.get_mutable()->InitAsDefaultInstance();
  Matrix_default_instance_.get_mutable()->InitAsDefaultInstance();
  MvoAssetAllocationInput_default_instance_.get_mutable()->InitAsDefaultInstance();
  MvoAssetAllocationOutput_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_dqlib_2eproto_once_);
void protobuf_InitDefaults_dqlib_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_dqlib_2eproto_once_,
                 &protobuf_InitDefaults_dqlib_2eproto_impl);
}
void protobuf_AddDesc_dqlib_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_dqlib_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013dqlib.proto\022\004echo\"\026\n\006Vector\022\014\n\004data\030\002 "
    "\003(\001\"\220\001\n\006Matrix\022\014\n\004rows\030\001 \001(\005\022\014\n\004cols\030\002 \001"
    "(\005\022\014\n\004data\030\003 \003(\001\0220\n\rstorage_order\030\004 \001(\0162"
    "\031.echo.Matrix.StorageOrder\"*\n\014StorageOrd"
    "er\022\014\n\010RowMajor\020\000\022\014\n\010ColMajor\020\001\"\222\002\n\027MvoAs"
    "setAllocationInput\022\"\n\014asset_return\030\001 \001(\013"
    "2\014.echo.Matrix\022\020\n\010strategy\030\002 \001(\t\022\023\n\013targ"
    "et_type\030\003 \001(\t\022!\n\013lower_bound\030\004 \001(\0132\014.ech"
    "o.Vector\022!\n\013upper_bound\030\005 \001(\0132\014.echo.Vec"
    "tor\022\024\n\014target_value\030\006 \001(\001\022\033\n\023annualizati"
    "on_scale\030\007 \001(\001\022\034\n\024num_returns_for_mean\030\010"
    " \001(\005\022\025\n\rnum_ef_points\030\t \001(\005\"O\n\030MvoAssetA"
    "llocationOutput\022\035\n\007weights\030\001 \001(\0132\014.echo."
    "Vector\022\024\n\014target_value\030\002 \001(\0012X\n\tDQServic"
    "e\022K\n\nCLAService\022\035.echo.MvoAssetAllocatio"
    "nInput\032\036.echo.MvoAssetAllocationOutputb\006"
    "proto3", 646);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dqlib.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dqlib_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_dqlib_2eproto_once_);
void protobuf_AddDesc_dqlib_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_dqlib_2eproto_once_,
                 &protobuf_AddDesc_dqlib_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dqlib_2eproto {
  StaticDescriptorInitializer_dqlib_2eproto() {
    protobuf_AddDesc_dqlib_2eproto();
  }
} static_descriptor_initializer_dqlib_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector::Vector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dqlib_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:echo.Vector)
}

void Vector::InitAsDefaultInstance() {
}

Vector::Vector(const Vector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:echo.Vector)
}

void Vector::SharedCtor() {
  _cached_size_ = 0;
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:echo.Vector)
  SharedDtor();
}

void Vector::SharedDtor() {
}

void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector_descriptor_;
}

const Vector& Vector::default_instance() {
  protobuf_InitDefaults_dqlib_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Vector> Vector_default_instance_;

Vector* Vector::New(::google::protobuf::Arena* arena) const {
  Vector* n = new Vector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:echo.Vector)
  data_.Clear();
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:echo.Vector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double data = 2;
      case 2: {
        if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:echo.Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:echo.Vector)
  return false;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:echo.Vector)
  // repeated double data = 2;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:echo.Vector)
}

::google::protobuf::uint8* Vector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:echo.Vector)
  // repeated double data = 2;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->data(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:echo.Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:echo.Vector)
  size_t total_size = 0;

  // repeated double data = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->data_size();
    data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:echo.Vector)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:echo.Vector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:echo.Vector)
    UnsafeMergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:echo.Vector)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Vector::UnsafeMergeFrom(const Vector& from) {
  GOOGLE_DCHECK(&from != this);
  data_.UnsafeMergeFrom(from.data_);
}

void Vector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:echo.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:echo.Vector)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Vector::IsInitialized() const {

  return true;
}

void Vector::Swap(Vector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector::InternalSwap(Vector* other) {
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector_descriptor_;
  metadata.reflection = Vector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector

// repeated double data = 2;
int Vector::data_size() const {
  return data_.size();
}
void Vector::clear_data() {
  data_.Clear();
}
double Vector::data(int index) const {
  // @@protoc_insertion_point(field_get:echo.Vector.data)
  return data_.Get(index);
}
void Vector::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:echo.Vector.data)
}
void Vector::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:echo.Vector.data)
}
const ::google::protobuf::RepeatedField< double >&
Vector::data() const {
  // @@protoc_insertion_point(field_list:echo.Vector.data)
  return data_;
}
::google::protobuf::RepeatedField< double >*
Vector::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:echo.Vector.data)
  return &data_;
}

inline const Vector* Vector::internal_default_instance() {
  return &Vector_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Matrix_StorageOrder_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Matrix_StorageOrder_descriptor_;
}
bool Matrix_StorageOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Matrix_StorageOrder Matrix::RowMajor;
const Matrix_StorageOrder Matrix::ColMajor;
const Matrix_StorageOrder Matrix::StorageOrder_MIN;
const Matrix_StorageOrder Matrix::StorageOrder_MAX;
const int Matrix::StorageOrder_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Matrix::kRowsFieldNumber;
const int Matrix::kColsFieldNumber;
const int Matrix::kDataFieldNumber;
const int Matrix::kStorageOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Matrix::Matrix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dqlib_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:echo.Matrix)
}

void Matrix::InitAsDefaultInstance() {
}

Matrix::Matrix(const Matrix& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:echo.Matrix)
}

void Matrix::SharedCtor() {
  ::memset(&rows_, 0, reinterpret_cast<char*>(&storage_order_) -
    reinterpret_cast<char*>(&rows_) + sizeof(storage_order_));
  _cached_size_ = 0;
}

Matrix::~Matrix() {
  // @@protoc_insertion_point(destructor:echo.Matrix)
  SharedDtor();
}

void Matrix::SharedDtor() {
}

void Matrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Matrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Matrix_descriptor_;
}

const Matrix& Matrix::default_instance() {
  protobuf_InitDefaults_dqlib_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Matrix> Matrix_default_instance_;

Matrix* Matrix::New(::google::protobuf::Arena* arena) const {
  Matrix* n = new Matrix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Matrix::Clear() {
// @@protoc_insertion_point(message_clear_start:echo.Matrix)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Matrix, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Matrix*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rows_, storage_order_);

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
}

bool Matrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:echo.Matrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rows = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cols;
        break;
      }

      // optional int32 cols = 2;
      case 2: {
        if (tag == 16) {
         parse_cols:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cols_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated double data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_storage_order;
        break;
      }

      // optional .echo.Matrix.StorageOrder storage_order = 4;
      case 4: {
        if (tag == 32) {
         parse_storage_order:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_storage_order(static_cast< ::echo::Matrix_StorageOrder >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:echo.Matrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:echo.Matrix)
  return false;
#undef DO_
}

void Matrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:echo.Matrix)
  // optional int32 rows = 1;
  if (this->rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rows(), output);
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cols(), output);
  }

  // repeated double data = 3;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->data(i), output);
  }

  // optional .echo.Matrix.StorageOrder storage_order = 4;
  if (this->storage_order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->storage_order(), output);
  }

  // @@protoc_insertion_point(serialize_end:echo.Matrix)
}

::google::protobuf::uint8* Matrix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:echo.Matrix)
  // optional int32 rows = 1;
  if (this->rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rows(), target);
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cols(), target);
  }

  // repeated double data = 3;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->data(i), target);
  }

  // optional .echo.Matrix.StorageOrder storage_order = 4;
  if (this->storage_order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->storage_order(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:echo.Matrix)
  return target;
}

size_t Matrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:echo.Matrix)
  size_t total_size = 0;

  // optional int32 rows = 1;
  if (this->rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rows());
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cols());
  }

  // optional .echo.Matrix.StorageOrder storage_order = 4;
  if (this->storage_order() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->storage_order());
  }

  // repeated double data = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->data_size();
    data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Matrix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:echo.Matrix)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Matrix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Matrix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:echo.Matrix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:echo.Matrix)
    UnsafeMergeFrom(*source);
  }
}

void Matrix::MergeFrom(const Matrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:echo.Matrix)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Matrix::UnsafeMergeFrom(const Matrix& from) {
  GOOGLE_DCHECK(&from != this);
  data_.UnsafeMergeFrom(from.data_);
  if (from.rows() != 0) {
    set_rows(from.rows());
  }
  if (from.cols() != 0) {
    set_cols(from.cols());
  }
  if (from.storage_order() != 0) {
    set_storage_order(from.storage_order());
  }
}

void Matrix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:echo.Matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix::CopyFrom(const Matrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:echo.Matrix)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Matrix::IsInitialized() const {

  return true;
}

void Matrix::Swap(Matrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Matrix::InternalSwap(Matrix* other) {
  std::swap(rows_, other->rows_);
  std::swap(cols_, other->cols_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(storage_order_, other->storage_order_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Matrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Matrix_descriptor_;
  metadata.reflection = Matrix_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Matrix

// optional int32 rows = 1;
void Matrix::clear_rows() {
  rows_ = 0;
}
::google::protobuf::int32 Matrix::rows() const {
  // @@protoc_insertion_point(field_get:echo.Matrix.rows)
  return rows_;
}
void Matrix::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:echo.Matrix.rows)
}

// optional int32 cols = 2;
void Matrix::clear_cols() {
  cols_ = 0;
}
::google::protobuf::int32 Matrix::cols() const {
  // @@protoc_insertion_point(field_get:echo.Matrix.cols)
  return cols_;
}
void Matrix::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:echo.Matrix.cols)
}

// repeated double data = 3;
int Matrix::data_size() const {
  return data_.size();
}
void Matrix::clear_data() {
  data_.Clear();
}
double Matrix::data(int index) const {
  // @@protoc_insertion_point(field_get:echo.Matrix.data)
  return data_.Get(index);
}
void Matrix::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:echo.Matrix.data)
}
void Matrix::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:echo.Matrix.data)
}
const ::google::protobuf::RepeatedField< double >&
Matrix::data() const {
  // @@protoc_insertion_point(field_list:echo.Matrix.data)
  return data_;
}
::google::protobuf::RepeatedField< double >*
Matrix::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:echo.Matrix.data)
  return &data_;
}

// optional .echo.Matrix.StorageOrder storage_order = 4;
void Matrix::clear_storage_order() {
  storage_order_ = 0;
}
::echo::Matrix_StorageOrder Matrix::storage_order() const {
  // @@protoc_insertion_point(field_get:echo.Matrix.storage_order)
  return static_cast< ::echo::Matrix_StorageOrder >(storage_order_);
}
void Matrix::set_storage_order(::echo::Matrix_StorageOrder value) {
  
  storage_order_ = value;
  // @@protoc_insertion_point(field_set:echo.Matrix.storage_order)
}

inline const Matrix* Matrix::internal_default_instance() {
  return &Matrix_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MvoAssetAllocationInput::kAssetReturnFieldNumber;
const int MvoAssetAllocationInput::kStrategyFieldNumber;
const int MvoAssetAllocationInput::kTargetTypeFieldNumber;
const int MvoAssetAllocationInput::kLowerBoundFieldNumber;
const int MvoAssetAllocationInput::kUpperBoundFieldNumber;
const int MvoAssetAllocationInput::kTargetValueFieldNumber;
const int MvoAssetAllocationInput::kAnnualizationScaleFieldNumber;
const int MvoAssetAllocationInput::kNumReturnsForMeanFieldNumber;
const int MvoAssetAllocationInput::kNumEfPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MvoAssetAllocationInput::MvoAssetAllocationInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dqlib_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:echo.MvoAssetAllocationInput)
}

void MvoAssetAllocationInput::InitAsDefaultInstance() {
  asset_return_ = const_cast< ::echo::Matrix*>(
      ::echo::Matrix::internal_default_instance());
  lower_bound_ = const_cast< ::echo::Vector*>(
      ::echo::Vector::internal_default_instance());
  upper_bound_ = const_cast< ::echo::Vector*>(
      ::echo::Vector::internal_default_instance());
}

MvoAssetAllocationInput::MvoAssetAllocationInput(const MvoAssetAllocationInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:echo.MvoAssetAllocationInput)
}

void MvoAssetAllocationInput::SharedCtor() {
  strategy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_return_ = NULL;
  lower_bound_ = NULL;
  upper_bound_ = NULL;
  ::memset(&target_value_, 0, reinterpret_cast<char*>(&num_ef_points_) -
    reinterpret_cast<char*>(&target_value_) + sizeof(num_ef_points_));
  _cached_size_ = 0;
}

MvoAssetAllocationInput::~MvoAssetAllocationInput() {
  // @@protoc_insertion_point(destructor:echo.MvoAssetAllocationInput)
  SharedDtor();
}

void MvoAssetAllocationInput::SharedDtor() {
  strategy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &MvoAssetAllocationInput_default_instance_.get()) {
    delete asset_return_;
    delete lower_bound_;
    delete upper_bound_;
  }
}

void MvoAssetAllocationInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MvoAssetAllocationInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MvoAssetAllocationInput_descriptor_;
}

const MvoAssetAllocationInput& MvoAssetAllocationInput::default_instance() {
  protobuf_InitDefaults_dqlib_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MvoAssetAllocationInput> MvoAssetAllocationInput_default_instance_;

MvoAssetAllocationInput* MvoAssetAllocationInput::New(::google::protobuf::Arena* arena) const {
  MvoAssetAllocationInput* n = new MvoAssetAllocationInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MvoAssetAllocationInput::Clear() {
// @@protoc_insertion_point(message_clear_start:echo.MvoAssetAllocationInput)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MvoAssetAllocationInput, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MvoAssetAllocationInput*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(target_value_, num_returns_for_mean_);
  if (GetArenaNoVirtual() == NULL && asset_return_ != NULL) delete asset_return_;
  asset_return_ = NULL;
  strategy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && lower_bound_ != NULL) delete lower_bound_;
  lower_bound_ = NULL;
  if (GetArenaNoVirtual() == NULL && upper_bound_ != NULL) delete upper_bound_;
  upper_bound_ = NULL;
  num_ef_points_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool MvoAssetAllocationInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:echo.MvoAssetAllocationInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .echo.Matrix asset_return = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asset_return()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_strategy;
        break;
      }

      // optional string strategy = 2;
      case 2: {
        if (tag == 18) {
         parse_strategy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strategy()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strategy().data(), this->strategy().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "echo.MvoAssetAllocationInput.strategy"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target_type;
        break;
      }

      // optional string target_type = 3;
      case 3: {
        if (tag == 26) {
         parse_target_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target_type().data(), this->target_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "echo.MvoAssetAllocationInput.target_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lower_bound;
        break;
      }

      // optional .echo.Vector lower_bound = 4;
      case 4: {
        if (tag == 34) {
         parse_lower_bound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lower_bound()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_upper_bound;
        break;
      }

      // optional .echo.Vector upper_bound = 5;
      case 5: {
        if (tag == 42) {
         parse_upper_bound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upper_bound()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_target_value;
        break;
      }

      // optional double target_value = 6;
      case 6: {
        if (tag == 49) {
         parse_target_value:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_value_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_annualization_scale;
        break;
      }

      // optional double annualization_scale = 7;
      case 7: {
        if (tag == 57) {
         parse_annualization_scale:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &annualization_scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num_returns_for_mean;
        break;
      }

      // optional int32 num_returns_for_mean = 8;
      case 8: {
        if (tag == 64) {
         parse_num_returns_for_mean:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_returns_for_mean_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num_ef_points;
        break;
      }

      // optional int32 num_ef_points = 9;
      case 9: {
        if (tag == 72) {
         parse_num_ef_points:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_ef_points_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:echo.MvoAssetAllocationInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:echo.MvoAssetAllocationInput)
  return false;
#undef DO_
}

void MvoAssetAllocationInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:echo.MvoAssetAllocationInput)
  // optional .echo.Matrix asset_return = 1;
  if (this->has_asset_return()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->asset_return_, output);
  }

  // optional string strategy = 2;
  if (this->strategy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strategy().data(), this->strategy().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.MvoAssetAllocationInput.strategy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strategy(), output);
  }

  // optional string target_type = 3;
  if (this->target_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_type().data(), this->target_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.MvoAssetAllocationInput.target_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->target_type(), output);
  }

  // optional .echo.Vector lower_bound = 4;
  if (this->has_lower_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->lower_bound_, output);
  }

  // optional .echo.Vector upper_bound = 5;
  if (this->has_upper_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->upper_bound_, output);
  }

  // optional double target_value = 6;
  if (this->target_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->target_value(), output);
  }

  // optional double annualization_scale = 7;
  if (this->annualization_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->annualization_scale(), output);
  }

  // optional int32 num_returns_for_mean = 8;
  if (this->num_returns_for_mean() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num_returns_for_mean(), output);
  }

  // optional int32 num_ef_points = 9;
  if (this->num_ef_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_ef_points(), output);
  }

  // @@protoc_insertion_point(serialize_end:echo.MvoAssetAllocationInput)
}

::google::protobuf::uint8* MvoAssetAllocationInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:echo.MvoAssetAllocationInput)
  // optional .echo.Matrix asset_return = 1;
  if (this->has_asset_return()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->asset_return_, false, target);
  }

  // optional string strategy = 2;
  if (this->strategy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strategy().data(), this->strategy().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.MvoAssetAllocationInput.strategy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strategy(), target);
  }

  // optional string target_type = 3;
  if (this->target_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_type().data(), this->target_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.MvoAssetAllocationInput.target_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->target_type(), target);
  }

  // optional .echo.Vector lower_bound = 4;
  if (this->has_lower_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->lower_bound_, false, target);
  }

  // optional .echo.Vector upper_bound = 5;
  if (this->has_upper_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->upper_bound_, false, target);
  }

  // optional double target_value = 6;
  if (this->target_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->target_value(), target);
  }

  // optional double annualization_scale = 7;
  if (this->annualization_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->annualization_scale(), target);
  }

  // optional int32 num_returns_for_mean = 8;
  if (this->num_returns_for_mean() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->num_returns_for_mean(), target);
  }

  // optional int32 num_ef_points = 9;
  if (this->num_ef_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->num_ef_points(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:echo.MvoAssetAllocationInput)
  return target;
}

size_t MvoAssetAllocationInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:echo.MvoAssetAllocationInput)
  size_t total_size = 0;

  // optional .echo.Matrix asset_return = 1;
  if (this->has_asset_return()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->asset_return_);
  }

  // optional string strategy = 2;
  if (this->strategy().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strategy());
  }

  // optional string target_type = 3;
  if (this->target_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target_type());
  }

  // optional .echo.Vector lower_bound = 4;
  if (this->has_lower_bound()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lower_bound_);
  }

  // optional .echo.Vector upper_bound = 5;
  if (this->has_upper_bound()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->upper_bound_);
  }

  // optional double target_value = 6;
  if (this->target_value() != 0) {
    total_size += 1 + 8;
  }

  // optional double annualization_scale = 7;
  if (this->annualization_scale() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 num_returns_for_mean = 8;
  if (this->num_returns_for_mean() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_returns_for_mean());
  }

  // optional int32 num_ef_points = 9;
  if (this->num_ef_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_ef_points());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MvoAssetAllocationInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:echo.MvoAssetAllocationInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MvoAssetAllocationInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MvoAssetAllocationInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:echo.MvoAssetAllocationInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:echo.MvoAssetAllocationInput)
    UnsafeMergeFrom(*source);
  }
}

void MvoAssetAllocationInput::MergeFrom(const MvoAssetAllocationInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:echo.MvoAssetAllocationInput)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MvoAssetAllocationInput::UnsafeMergeFrom(const MvoAssetAllocationInput& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_asset_return()) {
    mutable_asset_return()->::echo::Matrix::MergeFrom(from.asset_return());
  }
  if (from.strategy().size() > 0) {

    strategy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strategy_);
  }
  if (from.target_type().size() > 0) {

    target_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_type_);
  }
  if (from.has_lower_bound()) {
    mutable_lower_bound()->::echo::Vector::MergeFrom(from.lower_bound());
  }
  if (from.has_upper_bound()) {
    mutable_upper_bound()->::echo::Vector::MergeFrom(from.upper_bound());
  }
  if (from.target_value() != 0) {
    set_target_value(from.target_value());
  }
  if (from.annualization_scale() != 0) {
    set_annualization_scale(from.annualization_scale());
  }
  if (from.num_returns_for_mean() != 0) {
    set_num_returns_for_mean(from.num_returns_for_mean());
  }
  if (from.num_ef_points() != 0) {
    set_num_ef_points(from.num_ef_points());
  }
}

void MvoAssetAllocationInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:echo.MvoAssetAllocationInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MvoAssetAllocationInput::CopyFrom(const MvoAssetAllocationInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:echo.MvoAssetAllocationInput)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MvoAssetAllocationInput::IsInitialized() const {

  return true;
}

void MvoAssetAllocationInput::Swap(MvoAssetAllocationInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MvoAssetAllocationInput::InternalSwap(MvoAssetAllocationInput* other) {
  std::swap(asset_return_, other->asset_return_);
  strategy_.Swap(&other->strategy_);
  target_type_.Swap(&other->target_type_);
  std::swap(lower_bound_, other->lower_bound_);
  std::swap(upper_bound_, other->upper_bound_);
  std::swap(target_value_, other->target_value_);
  std::swap(annualization_scale_, other->annualization_scale_);
  std::swap(num_returns_for_mean_, other->num_returns_for_mean_);
  std::swap(num_ef_points_, other->num_ef_points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MvoAssetAllocationInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MvoAssetAllocationInput_descriptor_;
  metadata.reflection = MvoAssetAllocationInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MvoAssetAllocationInput

// optional .echo.Matrix asset_return = 1;
bool MvoAssetAllocationInput::has_asset_return() const {
  return this != internal_default_instance() && asset_return_ != NULL;
}
void MvoAssetAllocationInput::clear_asset_return() {
  if (GetArenaNoVirtual() == NULL && asset_return_ != NULL) delete asset_return_;
  asset_return_ = NULL;
}
const ::echo::Matrix& MvoAssetAllocationInput::asset_return() const {
  // @@protoc_insertion_point(field_get:echo.MvoAssetAllocationInput.asset_return)
  return asset_return_ != NULL ? *asset_return_
                         : *::echo::Matrix::internal_default_instance();
}
::echo::Matrix* MvoAssetAllocationInput::mutable_asset_return() {
  
  if (asset_return_ == NULL) {
    asset_return_ = new ::echo::Matrix;
  }
  // @@protoc_insertion_point(field_mutable:echo.MvoAssetAllocationInput.asset_return)
  return asset_return_;
}
::echo::Matrix* MvoAssetAllocationInput::release_asset_return() {
  // @@protoc_insertion_point(field_release:echo.MvoAssetAllocationInput.asset_return)
  
  ::echo::Matrix* temp = asset_return_;
  asset_return_ = NULL;
  return temp;
}
void MvoAssetAllocationInput::set_allocated_asset_return(::echo::Matrix* asset_return) {
  delete asset_return_;
  asset_return_ = asset_return;
  if (asset_return) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:echo.MvoAssetAllocationInput.asset_return)
}

// optional string strategy = 2;
void MvoAssetAllocationInput::clear_strategy() {
  strategy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MvoAssetAllocationInput::strategy() const {
  // @@protoc_insertion_point(field_get:echo.MvoAssetAllocationInput.strategy)
  return strategy_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvoAssetAllocationInput::set_strategy(const ::std::string& value) {
  
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echo.MvoAssetAllocationInput.strategy)
}
void MvoAssetAllocationInput::set_strategy(const char* value) {
  
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echo.MvoAssetAllocationInput.strategy)
}
void MvoAssetAllocationInput::set_strategy(const char* value, size_t size) {
  
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echo.MvoAssetAllocationInput.strategy)
}
::std::string* MvoAssetAllocationInput::mutable_strategy() {
  
  // @@protoc_insertion_point(field_mutable:echo.MvoAssetAllocationInput.strategy)
  return strategy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MvoAssetAllocationInput::release_strategy() {
  // @@protoc_insertion_point(field_release:echo.MvoAssetAllocationInput.strategy)
  
  return strategy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvoAssetAllocationInput::set_allocated_strategy(::std::string* strategy) {
  if (strategy != NULL) {
    
  } else {
    
  }
  strategy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strategy);
  // @@protoc_insertion_point(field_set_allocated:echo.MvoAssetAllocationInput.strategy)
}

// optional string target_type = 3;
void MvoAssetAllocationInput::clear_target_type() {
  target_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MvoAssetAllocationInput::target_type() const {
  // @@protoc_insertion_point(field_get:echo.MvoAssetAllocationInput.target_type)
  return target_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvoAssetAllocationInput::set_target_type(const ::std::string& value) {
  
  target_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echo.MvoAssetAllocationInput.target_type)
}
void MvoAssetAllocationInput::set_target_type(const char* value) {
  
  target_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echo.MvoAssetAllocationInput.target_type)
}
void MvoAssetAllocationInput::set_target_type(const char* value, size_t size) {
  
  target_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echo.MvoAssetAllocationInput.target_type)
}
::std::string* MvoAssetAllocationInput::mutable_target_type() {
  
  // @@protoc_insertion_point(field_mutable:echo.MvoAssetAllocationInput.target_type)
  return target_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MvoAssetAllocationInput::release_target_type() {
  // @@protoc_insertion_point(field_release:echo.MvoAssetAllocationInput.target_type)
  
  return target_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvoAssetAllocationInput::set_allocated_target_type(::std::string* target_type) {
  if (target_type != NULL) {
    
  } else {
    
  }
  target_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_type);
  // @@protoc_insertion_point(field_set_allocated:echo.MvoAssetAllocationInput.target_type)
}

// optional .echo.Vector lower_bound = 4;
bool MvoAssetAllocationInput::has_lower_bound() const {
  return this != internal_default_instance() && lower_bound_ != NULL;
}
void MvoAssetAllocationInput::clear_lower_bound() {
  if (GetArenaNoVirtual() == NULL && lower_bound_ != NULL) delete lower_bound_;
  lower_bound_ = NULL;
}
const ::echo::Vector& MvoAssetAllocationInput::lower_bound() const {
  // @@protoc_insertion_point(field_get:echo.MvoAssetAllocationInput.lower_bound)
  return lower_bound_ != NULL ? *lower_bound_
                         : *::echo::Vector::internal_default_instance();
}
::echo::Vector* MvoAssetAllocationInput::mutable_lower_bound() {
  
  if (lower_bound_ == NULL) {
    lower_bound_ = new ::echo::Vector;
  }
  // @@protoc_insertion_point(field_mutable:echo.MvoAssetAllocationInput.lower_bound)
  return lower_bound_;
}
::echo::Vector* MvoAssetAllocationInput::release_lower_bound() {
  // @@protoc_insertion_point(field_release:echo.MvoAssetAllocationInput.lower_bound)
  
  ::echo::Vector* temp = lower_bound_;
  lower_bound_ = NULL;
  return temp;
}
void MvoAssetAllocationInput::set_allocated_lower_bound(::echo::Vector* lower_bound) {
  delete lower_bound_;
  lower_bound_ = lower_bound;
  if (lower_bound) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:echo.MvoAssetAllocationInput.lower_bound)
}

// optional .echo.Vector upper_bound = 5;
bool MvoAssetAllocationInput::has_upper_bound() const {
  return this != internal_default_instance() && upper_bound_ != NULL;
}
void MvoAssetAllocationInput::clear_upper_bound() {
  if (GetArenaNoVirtual() == NULL && upper_bound_ != NULL) delete upper_bound_;
  upper_bound_ = NULL;
}
const ::echo::Vector& MvoAssetAllocationInput::upper_bound() const {
  // @@protoc_insertion_point(field_get:echo.MvoAssetAllocationInput.upper_bound)
  return upper_bound_ != NULL ? *upper_bound_
                         : *::echo::Vector::internal_default_instance();
}
::echo::Vector* MvoAssetAllocationInput::mutable_upper_bound() {
  
  if (upper_bound_ == NULL) {
    upper_bound_ = new ::echo::Vector;
  }
  // @@protoc_insertion_point(field_mutable:echo.MvoAssetAllocationInput.upper_bound)
  return upper_bound_;
}
::echo::Vector* MvoAssetAllocationInput::release_upper_bound() {
  // @@protoc_insertion_point(field_release:echo.MvoAssetAllocationInput.upper_bound)
  
  ::echo::Vector* temp = upper_bound_;
  upper_bound_ = NULL;
  return temp;
}
void MvoAssetAllocationInput::set_allocated_upper_bound(::echo::Vector* upper_bound) {
  delete upper_bound_;
  upper_bound_ = upper_bound;
  if (upper_bound) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:echo.MvoAssetAllocationInput.upper_bound)
}

// optional double target_value = 6;
void MvoAssetAllocationInput::clear_target_value() {
  target_value_ = 0;
}
double MvoAssetAllocationInput::target_value() const {
  // @@protoc_insertion_point(field_get:echo.MvoAssetAllocationInput.target_value)
  return target_value_;
}
void MvoAssetAllocationInput::set_target_value(double value) {
  
  target_value_ = value;
  // @@protoc_insertion_point(field_set:echo.MvoAssetAllocationInput.target_value)
}

// optional double annualization_scale = 7;
void MvoAssetAllocationInput::clear_annualization_scale() {
  annualization_scale_ = 0;
}
double MvoAssetAllocationInput::annualization_scale() const {
  // @@protoc_insertion_point(field_get:echo.MvoAssetAllocationInput.annualization_scale)
  return annualization_scale_;
}
void MvoAssetAllocationInput::set_annualization_scale(double value) {
  
  annualization_scale_ = value;
  // @@protoc_insertion_point(field_set:echo.MvoAssetAllocationInput.annualization_scale)
}

// optional int32 num_returns_for_mean = 8;
void MvoAssetAllocationInput::clear_num_returns_for_mean() {
  num_returns_for_mean_ = 0;
}
::google::protobuf::int32 MvoAssetAllocationInput::num_returns_for_mean() const {
  // @@protoc_insertion_point(field_get:echo.MvoAssetAllocationInput.num_returns_for_mean)
  return num_returns_for_mean_;
}
void MvoAssetAllocationInput::set_num_returns_for_mean(::google::protobuf::int32 value) {
  
  num_returns_for_mean_ = value;
  // @@protoc_insertion_point(field_set:echo.MvoAssetAllocationInput.num_returns_for_mean)
}

// optional int32 num_ef_points = 9;
void MvoAssetAllocationInput::clear_num_ef_points() {
  num_ef_points_ = 0;
}
::google::protobuf::int32 MvoAssetAllocationInput::num_ef_points() const {
  // @@protoc_insertion_point(field_get:echo.MvoAssetAllocationInput.num_ef_points)
  return num_ef_points_;
}
void MvoAssetAllocationInput::set_num_ef_points(::google::protobuf::int32 value) {
  
  num_ef_points_ = value;
  // @@protoc_insertion_point(field_set:echo.MvoAssetAllocationInput.num_ef_points)
}

inline const MvoAssetAllocationInput* MvoAssetAllocationInput::internal_default_instance() {
  return &MvoAssetAllocationInput_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MvoAssetAllocationOutput::kWeightsFieldNumber;
const int MvoAssetAllocationOutput::kTargetValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MvoAssetAllocationOutput::MvoAssetAllocationOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dqlib_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:echo.MvoAssetAllocationOutput)
}

void MvoAssetAllocationOutput::InitAsDefaultInstance() {
  weights_ = const_cast< ::echo::Vector*>(
      ::echo::Vector::internal_default_instance());
}

MvoAssetAllocationOutput::MvoAssetAllocationOutput(const MvoAssetAllocationOutput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:echo.MvoAssetAllocationOutput)
}

void MvoAssetAllocationOutput::SharedCtor() {
  weights_ = NULL;
  target_value_ = 0;
  _cached_size_ = 0;
}

MvoAssetAllocationOutput::~MvoAssetAllocationOutput() {
  // @@protoc_insertion_point(destructor:echo.MvoAssetAllocationOutput)
  SharedDtor();
}

void MvoAssetAllocationOutput::SharedDtor() {
  if (this != &MvoAssetAllocationOutput_default_instance_.get()) {
    delete weights_;
  }
}

void MvoAssetAllocationOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MvoAssetAllocationOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MvoAssetAllocationOutput_descriptor_;
}

const MvoAssetAllocationOutput& MvoAssetAllocationOutput::default_instance() {
  protobuf_InitDefaults_dqlib_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MvoAssetAllocationOutput> MvoAssetAllocationOutput_default_instance_;

MvoAssetAllocationOutput* MvoAssetAllocationOutput::New(::google::protobuf::Arena* arena) const {
  MvoAssetAllocationOutput* n = new MvoAssetAllocationOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MvoAssetAllocationOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:echo.MvoAssetAllocationOutput)
  if (GetArenaNoVirtual() == NULL && weights_ != NULL) delete weights_;
  weights_ = NULL;
  target_value_ = 0;
}

bool MvoAssetAllocationOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:echo.MvoAssetAllocationOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .echo.Vector weights = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weights()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_target_value;
        break;
      }

      // optional double target_value = 2;
      case 2: {
        if (tag == 17) {
         parse_target_value:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_value_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:echo.MvoAssetAllocationOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:echo.MvoAssetAllocationOutput)
  return false;
#undef DO_
}

void MvoAssetAllocationOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:echo.MvoAssetAllocationOutput)
  // optional .echo.Vector weights = 1;
  if (this->has_weights()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->weights_, output);
  }

  // optional double target_value = 2;
  if (this->target_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->target_value(), output);
  }

  // @@protoc_insertion_point(serialize_end:echo.MvoAssetAllocationOutput)
}

::google::protobuf::uint8* MvoAssetAllocationOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:echo.MvoAssetAllocationOutput)
  // optional .echo.Vector weights = 1;
  if (this->has_weights()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->weights_, false, target);
  }

  // optional double target_value = 2;
  if (this->target_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->target_value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:echo.MvoAssetAllocationOutput)
  return target;
}

size_t MvoAssetAllocationOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:echo.MvoAssetAllocationOutput)
  size_t total_size = 0;

  // optional .echo.Vector weights = 1;
  if (this->has_weights()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->weights_);
  }

  // optional double target_value = 2;
  if (this->target_value() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MvoAssetAllocationOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:echo.MvoAssetAllocationOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MvoAssetAllocationOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MvoAssetAllocationOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:echo.MvoAssetAllocationOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:echo.MvoAssetAllocationOutput)
    UnsafeMergeFrom(*source);
  }
}

void MvoAssetAllocationOutput::MergeFrom(const MvoAssetAllocationOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:echo.MvoAssetAllocationOutput)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MvoAssetAllocationOutput::UnsafeMergeFrom(const MvoAssetAllocationOutput& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_weights()) {
    mutable_weights()->::echo::Vector::MergeFrom(from.weights());
  }
  if (from.target_value() != 0) {
    set_target_value(from.target_value());
  }
}

void MvoAssetAllocationOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:echo.MvoAssetAllocationOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MvoAssetAllocationOutput::CopyFrom(const MvoAssetAllocationOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:echo.MvoAssetAllocationOutput)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MvoAssetAllocationOutput::IsInitialized() const {

  return true;
}

void MvoAssetAllocationOutput::Swap(MvoAssetAllocationOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MvoAssetAllocationOutput::InternalSwap(MvoAssetAllocationOutput* other) {
  std::swap(weights_, other->weights_);
  std::swap(target_value_, other->target_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MvoAssetAllocationOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MvoAssetAllocationOutput_descriptor_;
  metadata.reflection = MvoAssetAllocationOutput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MvoAssetAllocationOutput

// optional .echo.Vector weights = 1;
bool MvoAssetAllocationOutput::has_weights() const {
  return this != internal_default_instance() && weights_ != NULL;
}
void MvoAssetAllocationOutput::clear_weights() {
  if (GetArenaNoVirtual() == NULL && weights_ != NULL) delete weights_;
  weights_ = NULL;
}
const ::echo::Vector& MvoAssetAllocationOutput::weights() const {
  // @@protoc_insertion_point(field_get:echo.MvoAssetAllocationOutput.weights)
  return weights_ != NULL ? *weights_
                         : *::echo::Vector::internal_default_instance();
}
::echo::Vector* MvoAssetAllocationOutput::mutable_weights() {
  
  if (weights_ == NULL) {
    weights_ = new ::echo::Vector;
  }
  // @@protoc_insertion_point(field_mutable:echo.MvoAssetAllocationOutput.weights)
  return weights_;
}
::echo::Vector* MvoAssetAllocationOutput::release_weights() {
  // @@protoc_insertion_point(field_release:echo.MvoAssetAllocationOutput.weights)
  
  ::echo::Vector* temp = weights_;
  weights_ = NULL;
  return temp;
}
void MvoAssetAllocationOutput::set_allocated_weights(::echo::Vector* weights) {
  delete weights_;
  weights_ = weights;
  if (weights) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:echo.MvoAssetAllocationOutput.weights)
}

// optional double target_value = 2;
void MvoAssetAllocationOutput::clear_target_value() {
  target_value_ = 0;
}
double MvoAssetAllocationOutput::target_value() const {
  // @@protoc_insertion_point(field_get:echo.MvoAssetAllocationOutput.target_value)
  return target_value_;
}
void MvoAssetAllocationOutput::set_target_value(double value) {
  
  target_value_ = value;
  // @@protoc_insertion_point(field_set:echo.MvoAssetAllocationOutput.target_value)
}

inline const MvoAssetAllocationOutput* MvoAssetAllocationOutput::internal_default_instance() {
  return &MvoAssetAllocationOutput_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace echo

// @@protoc_insertion_point(global_scope)
